version: '3.8'

services:
  rabbitmq1:
    image: rabbitmq:3-management
    hostname: rabbit1
    container_name: rabbitmq1
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "rabbitmq-cluster-cookie"
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - rabbitmq1_data:/var/lib/rabbitmq
    networks:
      - rabbitmq_cluster
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  rabbitmq2:
    image: rabbitmq:3-management
    hostname: rabbit2
    container_name: rabbitmq2
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "rabbitmq-cluster-cookie"
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - rabbitmq2_data:/var/lib/rabbitmq
    networks:
      - rabbitmq_cluster
    depends_on:
      rabbitmq1:
        condition: service_healthy
    command: >
      bash -c "
        # Fix permissions first
        chown -R rabbitmq:rabbitmq /var/lib/rabbitmq
        chmod 755 /var/lib/rabbitmq
      
        # Start RabbitMQ in background
        docker-entrypoint.sh rabbitmq-server &
        RABBITMQ_PID=\$$!
      
        # Wait for this node to be ready
        echo 'Waiting for RabbitMQ to start...'
        until rabbitmq-diagnostics -q ping; do
          echo 'Waiting for RabbitMQ...'
          sleep 3
        done
      
        # Wait a bit more for full initialization
        sleep 15
      
        # Join cluster
        echo 'Joining cluster...'
        rabbitmqctl stop_app
        rabbitmqctl reset
        rabbitmqctl join_cluster rabbit@rabbit1
        rabbitmqctl start_app
      
        # Verify cluster status
        echo 'Cluster status:'
        rabbitmqctl cluster_status
      
        # Wait for background process
        wait \$$RABBITMQ_PID
      "
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  rabbitmq3:
    image: rabbitmq:3-management
    hostname: rabbit3
    container_name: rabbitmq3
    ports:
      - "5674:5672"
      - "15674:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: "rabbitmq-cluster-cookie"
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - rabbitmq3_data:/var/lib/rabbitmq
    networks:
      - rabbitmq_cluster
    depends_on:
      rabbitmq1:
        condition: service_healthy
      rabbitmq2:
        condition: service_healthy
    command: >
      bash -c "
        # Fix permissions first
        chown -R rabbitmq:rabbitmq /var/lib/rabbitmq
        chmod 755 /var/lib/rabbitmq
      
        # Start RabbitMQ in background
        docker-entrypoint.sh rabbitmq-server &
        RABBITMQ_PID=\$$!
      
        # Wait for this node to be ready
        echo 'Waiting for RabbitMQ to start...'
        until rabbitmq-diagnostics -q ping; do
          echo 'Waiting for RabbitMQ...'
          sleep 3
        done
      
        # Wait a bit more for full initialization
        sleep 15
      
        # Join cluster
        echo 'Joining cluster...'
        rabbitmqctl stop_app
        rabbitmqctl reset
        rabbitmqctl join_cluster rabbit@rabbit1
        rabbitmqctl start_app
      
        # Verify cluster status
        echo 'Cluster status:'
        rabbitmqctl cluster_status
      
        # Wait for background process
        wait \$$RABBITMQ_PID
      "
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

volumes:
  rabbitmq1_data:
  rabbitmq2_data:
  rabbitmq3_data:

networks:
  rabbitmq_cluster:
    driver: bridge